aws cft create canary heart beat every 5 mins and alerts sns if failure

ChatGPT said:
To create an AWS CloudFormation template (CFT) that provisions an AWS CloudWatch Synthetics canary that runs every 5 minutes and alerts via SNS if the canary fails, you need to do the following steps:

Create the SNS Topic for alert notifications.

Create the CloudWatch Synthetics Canary with a 5-minute heartbeat.

Create a CloudWatch Alarm to monitor the canary's status and send an alert to SNS when it fails.

Here’s a sample CloudFormation template (in YAML format) to accomplish that:

yaml
Copy
AWSTemplateFormatVersion: '2010-09-09'
Description: Create a CloudWatch Synthetics Canary and set up SNS alert on failure

Resources:
  # SNS Topic for alerts
  CanaryFailureTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Canary Failure Alerts"
      TopicName: "CanaryFailureAlerts"

  # CloudWatch Synthetics Canary
  MyCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: "MyCanary"
      RuntimeVersion: "syn-nodejs-4.0"  # You can use the runtime that suits your test script
      Handler: "index.handler"  # Assuming you are using the default handler for Node.js
      Code:
        S3Bucket: "your-s3-bucket-name"  # The S3 bucket where your canary script is stored
        S3Key: "your-canary-script.zip"  # The S3 key for the zip containing the script
      Schedule:
        Expression: "rate(5 minutes)"  # Set heartbeat to run every 5 minutes
      SuccessRetentionPeriod: 31  # Retain success results for 31 days
      FailureRetentionPeriod: 31  # Retain failure results for 31 days

  # CloudWatch Alarm to detect canary failure
  CanaryFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "CanaryFailureAlarm"
      MetricName: "Failed"
      Namespace: "AWS/Synthetics"
      Statistic: "Sum"
      Period: 300  # 5 minutes in seconds
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - Ref: CanaryFailureTopic  # SNS Topic ARN for failure notifications
      OKActions:
        - Ref: CanaryFailureTopic
      Dimensions:
        - Name: "CanaryName"
          Value: !Ref MyCanary
      AlarmDescription: "This alarm is triggered when the Canary fails"

Outputs:
  CanaryFailureTopicArn:
    Description: "SNS Topic ARN for Canary failure alerts"
    Value: !Ref CanaryFailureTopic
Explanation of the Template:
SNS Topic (CanaryFailureTopic): This is an SNS topic to send failure notifications.

Canary (MyCanary): The canary is configured to run every 5 minutes with the following properties:

RuntimeVersion: You can change this to the appropriate runtime version (e.g., syn-nodejs-4.0).

Handler: This points to the entry point in your Lambda-like function. You will need to provide the code.

Code: The code for the canary is assumed to be in an S3 bucket.

Schedule: It is set to rate(5 minutes), which makes the canary run every 5 minutes.

CloudWatch Alarm (CanaryFailureAlarm): This is used to monitor the Failed metric from the canary. If the canary fails, it triggers the SNS notification.

MetricName: We're monitoring the Failed metric from the canary.

Threshold: If the canary fails, the threshold is set to trigger the alarm.

AlarmActions: When the alarm is triggered, it sends an alert to the SNS topic.

Outputs: The ARN of the SNS topic is outputted for reference.

Next Steps:
Make sure your canary script is uploaded to the specified S3 bucket and the correct bucket name and object key are used in the template.

Ensure that your SNS topic has subscriptions configured (such as email, Lambda, etc.) to receive the alerts.

Deploy the CloudFormation stack.

This setup will create a canary that runs every 5 minutes and will notify you via SNS if the canary fails.


You said:
aws cft python canary heart beat 3 urls every 5 mins and alerts sns if failure

ChatGPT said:
To create an AWS CloudFormation template (CFT) for a Python-based CloudWatch Synthetics Canary that checks 3 URLs every 5 minutes and sends an SNS alert if any of the URLs fail, you can follow this approach:

Create the SNS Topic for failure alerts.

Create the CloudWatch Synthetics Canary that runs every 5 minutes and checks the 3 URLs.

Create a CloudWatch Alarm to monitor the canary's status and trigger SNS alerts if a failure occurs.

Below is an example CloudFormation template in YAML that fulfills the requirement:

AWS CloudFormation Template (YAML)
yaml
Copy
AWSTemplateFormatVersion: '2010-09-09'
Description: Create a CloudWatch Synthetics Canary (Python) that checks 3 URLs every 5 minutes and alerts via SNS on failure.

Resources:

  # SNS Topic for alerts
  CanaryFailureTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Canary Failure Alerts"
      TopicName: "CanaryFailureAlerts"

  # CloudWatch Synthetics Canary (Python) to check 3 URLs
  MyCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: "MyPythonCanary"
      RuntimeVersion: "syn-python-3.8"  # Python runtime for the canary
      Handler: "index.handler"  # Default handler for Python
      Code:
        S3Bucket: "your-s3-bucket-name"  # The S3 bucket where your canary script is stored
        S3Key: "canary-script.zip"  # The S3 key for the zip containing the script
      Schedule:
        Expression: "rate(5 minutes)"  # Set heartbeat to run every 5 minutes
      SuccessRetentionPeriod: 31  # Retain success results for 31 days
      FailureRetentionPeriod: 31  # Retain failure results for 31 days
      VpcConfig:
        SubnetIds: 
          - "subnet-xxxxxxxx"  # Optional, only if running in a VPC
        SecurityGroupIds:
          - "sg-xxxxxxxx"  # Optional, only if running in a VPC

  # CloudWatch Alarm to detect canary failure
  CanaryFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "CanaryFailureAlarm"
      MetricName: "Failed"
      Namespace: "AWS/Synthetics"
      Statistic: "Sum"
      Period: 300  # 5 minutes in seconds
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - Ref: CanaryFailureTopic  # SNS Topic ARN for failure notifications
      OKActions:
        - Ref: CanaryFailureTopic
      Dimensions:
        - Name: "CanaryName"
          Value: !Ref MyCanary
      AlarmDescription: "This alarm is triggered when the Canary fails"

Outputs:
  CanaryFailureTopicArn:
    Description: "SNS Topic ARN for Canary failure alerts"
    Value: !Ref CanaryFailureTopic
Python Canary Script
You need to upload a Python script to an S3 bucket that checks the 3 URLs. Here’s an example Python script (index.py) to use for your canary:

python
Copy
import time
import requests

# List of URLs to check
urls = [
    "https://example1.com",
    "https://example2.com",
    "https://example3.com"
]

# Function to check URLs
def check_urls():
    for url in urls:
        try:
            response = requests.get(url)
            # If status code is not 200, this will trigger a failure
            if response.status_code != 200:
                print(f"Error: {url} returned status code {response.status_code}")
                return False
        except requests.RequestException as e:
            print(f"Error: {url} failed with exception {str(e)}")
            return False
    return True

def handler(event, context):
    # Check the URLs and print the result
    if not check_urls():
        raise Exception("One or more URLs failed.")
    else:
        print("All URLs are working fine.")
Steps to Deploy:
Upload the Python script:

Zip the index.py file along with any dependencies (if needed) and upload it to an S3 bucket.

Make sure the bucket name and the S3 key (file path) are correct in the CloudFormation template.

Create the CloudFormation Stack:

Deploy the CloudFormation stack using the AWS Console, AWS CLI, or AWS SDK. This will create the SNS topic, the canary, and the associated CloudWatch alarm.

Set up SNS Subscriptions:

You can subscribe your SNS topic (CanaryFailureAlerts) to an email address, Lambda, or other endpoints where you want to receive failure alerts.

Key Points:
Python Script: The script checks the status of the 3 URLs. If any URL does not return a 200 OK status or fails due to an exception, it triggers a failure.

CloudWatch Alarm: The alarm monitors the canary's "Failed" metric and triggers an alert via SNS if the canary fails.

Scheduling: The canary is set to run every 5 minutes.

With this setup, you'll have a Python-based canary that checks 3 URLs every 5 minutes and alerts you via SNS in case any URL fails.
