1. Create a Kinesis Data Firehose Stream

Kinesis Data Firehose will act as the pipeline to send logs from CloudWatch to OpenSearch.
Steps:

    Go to AWS Console â†’ Kinesis â†’ Create Delivery Stream
    Choose Source:
        Select Direct PUT or other sources (CloudWatch will push logs to this Firehose stream).
    Choose Destination:
        Select Amazon OpenSearch Service if using AWS OpenSearch.
        If using a standalone self-managed OpenSearch, choose Amazon S3 and set up a Lambda function to forward logs to OpenSearch manually.
    Set Buffer Conditions:
        Buffer size: 5MB (default)
        Buffer interval: 60 seconds
    Configure Index Rotation:
        Index pattern: cloudwatch-logs-{date}
    IAM Role for Firehose:
        Grant Kinesis permission to write to OpenSearch (AmazonOpenSearchServiceFullAccess).
    Create Stream.

2. Enable CloudWatch Logs Subscription Filter

CloudWatch Logs needs to forward log data to Kinesis Firehose.
Steps:

    Go to AWS Console â†’ CloudWatch â†’ Log Groups
    Select the log group (e.g., /aws/lambda/my-function-logs).
    Click Actions â†’ Create Subscription Filter.
    Destination: Choose Amazon Kinesis Data Firehose.
    Select the Kinesis Firehose stream created earlier.
    Set filter pattern (leave "" to send all logs).
    Click Start Streaming.

3. Deploy a Standalone OpenSearch Cluster

You can install OpenSearch on EC2 or use a self-managed OpenSearch cluster.
Option 1: Deploy OpenSearch on EC2

    Launch an EC2 instance (Ubuntu 22.04 or Amazon Linux).
    Install OpenSearch:

wget https://artifacts.opensearch.org/releases/bundle/opensearch/2.12.0/opensearch-2.12.0-linux-x64.tar.gz
tar -xzf opensearch-2.12.0-linux-x64.tar.gz
cd opensearch-2.12.0
./opensearch-tar-install.sh

Edit OpenSearch Configuration (opensearch.yml):

network.host: 0.0.0.0
discovery.type: single-node

Start OpenSearch:

./bin/opensearch &

Allow OpenSearch Traffic (Optional, if using public access):

    sudo ufw allow 9200/tcp

4. Validate Log Flow
Test the Data Pipeline

After setting up Kinesis and OpenSearch:

    Check CloudWatch Logs â†’ Subscription Filters (ensure Kinesis is receiving logs).
    In OpenSearch, verify logs:

    curl -X GET "http://your-opensearch-endpoint:9200/cloudwatch-logs-*/_search?pretty"

    Use OpenSearch Dashboards to visualize logs.

Additional Considerations

âœ… Security:

    Restrict OpenSearch access via IAM roles, VPC, or IP whitelisting.
    Enable TLS for OpenSearch connections.

âœ… Performance Tuning:

    Use Kinesis Firehose buffering to control log write frequency.
    Set OpenSearch index lifecycle policies to delete old logs.

âœ… Error Handling:

    Check Kinesis error logs in CloudWatch if logs are missing.
    Verify IAM roles assigned to Kinesis and OpenSearch.

Let me know if you need help troubleshooting! ðŸš€


=========================================================

1. Ensure You Are Using Kinesis Data Firehose (Not Kinesis Data Streams)

AWS Kinesis has multiple services:

    Kinesis Data Streams â†’ For real-time streaming data (not what we need).
    Kinesis Data Firehose â†’ Used for sending data to OpenSearch, S3, etc.

ðŸ”¹ Fix:
Go to AWS Console â†’ Kinesis â†’ Data Firehose, then look for "Create Delivery Stream".
ðŸ‘‰ Direct Link: AWS Kinesis Data Firehose
2. Check AWS Region

Not all AWS regions support Kinesis Data Firehose. If the option is missing:
ðŸ”¹ Fix:

    In the AWS Console, switch to a supported region like us-east-1 (N. Virginia) or us-west-2 (Oregon).
    Try accessing Kinesis Data Firehose again.

3. Check IAM Permissions

If your AWS user/account does not have the required permissions, the Create Delivery Stream option will be missing.

ðŸ”¹ Fix:
Ask your AWS admin to grant these permissions to your IAM user:

{
    "Effect": "Allow",
    "Action": [
        "firehose:CreateDeliveryStream",
        "firehose:PutRecord",
        "firehose:PutRecordBatch",
        "firehose:DescribeDeliveryStream",
        "firehose:ListDeliveryStreams"
    ],
    "Resource": "*"
}

ðŸ‘‰ Steps to Check Permissions:

    Go to AWS Console â†’ IAM â†’ Users.
    Select your IAM User.
    Click Permissions â†’ Add Permissions.
    Attach the policy "AmazonKinesisFirehoseFullAccess".

4. Use AWS CLI to Create a Firehose Stream (Alternative)

If the AWS Console is missing the option, try creating the stream using AWS CLI.

ðŸ”¹ Command to Create a Kinesis Firehose Stream for OpenSearch:

aws firehose create-delivery-stream \
  --delivery-stream-name MyFirehoseStream \
  --delivery-stream-type DirectPut \
  --opensearch-destination-configuration \
  ClusterEndpoint="https://your-opensearch-endpoint",IndexName="cloudwatch-logs",RoleARN="arn:aws:iam::123456789012:role/firehose-role"

ðŸ‘‰ Check Firehose Streams:

aws firehose list-delivery-streams

5. Check AWS Service Quotas

If your AWS account has reached the limit for Kinesis Firehose Streams, you may not be able to create new ones.

ðŸ”¹ Fix:

    Go to AWS Console â†’ Service Quotas.
    Search for "Kinesis Data Firehose Delivery Streams".
    If at the limit, request a quota increase.

âœ… Final Steps to Fix

    Ensure you're in Kinesis Data Firehose (not Kinesis Data Streams).
    Check AWS region (use us-east-1 or another supported region).
    Verify IAM permissions (AmazonKinesisFirehoseFullAccess).
    Use AWS CLI if the console option is missing.
    Check service quotas if you hit Firehose limits.

Let me know if you need more help! ðŸš€


====================================================================================================================================

Option 1: Enable HTTPS Using an Nginx Reverse Proxy (Recommended)

Since OpenSearch on EC2 doesnâ€™t have HTTPS by default, you can set up Nginx as a reverse proxy with an SSL certificate.
Step 1: Install Nginx and Certbot

sudo apt update && sudo apt install -y nginx certbot python3-certbot-nginx

Step 2: Configure Nginx as a Reverse Proxy

    Open the Nginx configuration file:

sudo nano /etc/nginx/sites-available/opensearch

Add the following configuration (replace your-domain.com with your actual domain name or public IP):

    server {
        listen 443 ssl;
        server_name your-domain.com;

        ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;

        location / {
            proxy_pass http://localhost:9200/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    Save and exit (CTRL + X, then Y â†’ Enter).

Step 3: Enable SSL and Restart Nginx

sudo ln -s /etc/nginx/sites-available/opensearch /etc/nginx/sites-enabled/
sudo certbot --nginx -d your-domain.com
sudo systemctl restart nginx

Now, OpenSearch should be accessible at https://your-domain.com.
âœ… Option 2: Use an AWS ALB with SSL Termination

If you donâ€™t want to manage an SSL setup on your EC2, you can use an Application Load Balancer (ALB) in AWS:

    Create an Application Load Balancer in AWS
    Attach an SSL certificate (from AWS Certificate Manager)
    Set EC2 OpenSearch instance as a target
    Use the ALBâ€™s HTTPS URL in Firehose

âœ… Configure Firehose to Use HTTPS

Once you have an HTTPS URL (https://your-domain.com), update your Firehose configuration:

aws firehose create-delivery-stream \
  --delivery-stream-name CloudWatchToOpenSearch \
  --delivery-stream-type DirectPut \
  --http-endpoint-destination-configuration '{
      "RoleARN": "arn:aws:iam::123456789012:role/firehose-role",
      "EndpointConfiguration": {
          "Url": "https://your-domain.com/_bulk",
          "Name": "MyOpenSearch"
      },
      "BufferingHints": {
          "SizeInMBs": 5,
          "IntervalInSeconds": 60
      },
      "S3BackupMode": "Enabled",
      "S3Configuration": {
          "RoleARN": "arn:aws:iam::123456789012:role/firehose-role",
          "BucketARN": "arn:aws:s3:::my-firehose-backup-bucket",
          "Prefix": "logs/"
      }
  }'

ðŸš€ Next Steps

    Try accessing OpenSearch in your browser at https://your-domain.com.
    Ensure port 443 (HTTPS) is open in your EC2 security group.
    Update Firehose to use https://your-domain.com/_bulk.

Let me know if you need help setting this up! ðŸš€


==================================================================

Install Required Packages
1. Install Nginx (for HTTPS proxy)

sudo yum install -y nginx

Start and enable Nginx:

sudo systemctl start nginx
sudo systemctl enable nginx

2. Install Certbot (for SSL)

For RHEL 8+:

sudo dnf install -y certbot python3-certbot-nginx

For RHEL 7:

sudo yum install -y epel-release
sudo yum install -y certbot python2-certbot-nginx

ðŸš€ Next Steps

    Verify that yum is working (sudo yum update -y).
    Confirm if you need an HTTPS setup for Kinesis Firehose.
    If you need OpenSearch running with HTTPS, proceed with the Nginx proxy setup.

Let me know if you need more help! ðŸš€

========================================================================================================

Since you're using Red Hat Enterprise Linux (RHEL) 9.5, you need to enable the correct repositories before installing packages like EPEL and Certbot.
âœ… Step 1: Enable Required Repositories

Run the following commands to enable EPEL and CodeReady Builder repositories:

sudo dnf config-manager --set-enabled crb
sudo dnf install -y epel-release

If the crb repository is not found, try:

sudo subscription-manager repos --enable codeready-builder-for-rhel-9-rhui-rpms

âœ… Step 2: Install Required Packages

Once EPEL is enabled, install Certbot and Nginx:

sudo dnf install -y certbot python3-certbot-nginx nginx

Start and enable Nginx:

sudo systemctl start nginx
sudo systemctl enable nginx

âœ… Step 3: Verify Installation

Check if Nginx is running:

sudo systemctl status nginx

Test if Certbot is installed:

certbot --version

ðŸš€ Next Steps

    Confirm repositories are enabled (dnf repolist).
    Try installing EPEL and Certbot again.
    Let me know if you hit any errors! ðŸš€



